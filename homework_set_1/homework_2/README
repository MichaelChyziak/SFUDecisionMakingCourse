HOMEWORK 2

SETUP
The program was run and compiled in Ubuntu 18.04 but should work in most other versions. The following commands were ran in order to get the program working:
> sudo apt-get update
> sudo apt-get install freeglut3
> sudo apt-get install freeglut3-dev
> sudo apt-get install binutils-gold
> sudo apt-get install g++ cmake
> sudo apt-get install libglew-dev
> sudo apt-get install g++
> sudo apt-get install mesa-common-dev
> sudo apt-get install build-essential
> sudo apt-get install libglew1.5-dev libglm-dev
> sudo apt-get install mesa-utils
> sudo apt-get â€“f install


PROGRAM COMPILATION AND RUNNING
The following command should be executed in order to compile the program:
> g++ visual_quicksort.cc -lm -lglut -lGL -lGLU -o visual_quicksort

This should create a "visual_quicksort" program which is ran doing the following command:
> ./visual_quicksort

PROGRAM GUIDE
Shows the result of the quicksort algorithm using two examples. 
For one of the examples, the letters of the programmers full name is sorted in ASCII value. 
The other example sorts and stacks 4 graphical blocks according to their R value in their RGB color deceleration. 
The initial screen is the user specified colors of the random stack of block (cube 1 is bottom, cube 4 at the top) and the final screen is the sorted assortment of the RGB blocks.
A terminal interface is used for the user inputs as well as notifying the user of currect actions they can take.

EXTRA
Four images are provided in .png format. They are actual screenshots of the program running and showing some of the examples in action. On the left is the terminal with the commands and on the right will be the OpenGL GUI (if applicable). The screen can also be maximized if the user wishes.

DEMO
Following the screenshots named demoX (where X is an integer) is a short demo of how the program works. 
- In demo1.png the program is ran and the user enters "1" which then sorts the developers name alphabetically using the quicksort algorithm. Since there is a space between the first and last name (and it has a lower ascii value than 'A') there is a space shown first before the rest is sorted. The user then ends the program by entering "3".
- In demo2.png the program is ran but this time "2" is entered by the user. This prompts them to input the RGB values for the 4 cubes (the values input can be seen on the terminal). Once input a GUI appears with the four cubes in an unsorted format starting with Cube1 at the bottom and Cube4 at the top.
- In demo3.png (continuation from demo2.png) the user presses the *Enter* button on their keyboard which shifts the cubes into a sorted RGB format with the highest R values at the top and descending R values to the bottom.
- demo4.png (continuation from demo2.png and demo3.png) is the screen after the user presses the *Esc* button on their keyboard. This closes the GUI window and then the user enters "3" which then closes the program.
This concludes the demo for this program.
